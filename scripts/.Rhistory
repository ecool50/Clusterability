# single distibutions
expMu2Value <- c()
bimodalData <- c()
mu1 <- log(exp_mu1)
mu2 <- log(exp_mu1)
bimodalData <- c(bimodalData,log(bimodalDistFunc(n=N,cpct,mu1,mu2, sig1,sig2)))
expMu2Value <- c(expMu2Value,rep(exp_mu1,length(log(bimodalDistFunc(n=N,cpct,mu1,mu2, sig1,sig2)))))
mu1 <- log(exp_mu1)
mu2 <- log(max_exp_mu2)
bimodalData <- c(bimodalData,log(bimodalDistFunc(n=N,cpct,mu1,mu2, sig1,sig2)))
expMu2Value <- c(expMu2Value,rep(max_exp_mu2,length(log(bimodalDistFunc(n=N,cpct,mu1,mu2, sig1,sig2)))))
mu1 <- log(exp_mu1)
mu2 <- log(trunc((max_exp_mu2-exp_mu1)/2+1))
bimodalData <- c(bimodalData,log(bimodalDistFunc(n=N,cpct,mu1,mu2, sig1,sig2)))
expMu2Value <- c(expMu2Value,rep(trunc((max_exp_mu2-exp_mu1)/2+1),length(log(bimodalDistFunc(n=N,cpct,mu1,mu2, sig1,sig2)))))
tableExamples <- data.frame(expMu2Value,bimodalData)
tableExamples$expMu2Value <- as.factor(tableExamples$expMu2Value)
ExamplePlot <- ggplot(tableExamples)+
geom_histogram(aes(bimodalData),color='white')+
ylab("Count")+
xlab("")+
facet_wrap(~expMu2Value)+
ggtitle("Intensity of bimodularity")
# calculation of the dip test index
exp_mu2Int = seq(from=exp_mu1,to=max_exp_mu2,length.out=intervStep)
expmu2Vec = c()
dipStat = c()
dipPval = c()
testDone = c()
for(exp_mu2 in exp_mu2Int){
mu1 <- log(exp_mu1)
mu2 <- log(exp_mu2)
for(rep in 1:repPerInt){
bimodalData <- log(bimodalDistFunc(n=N,cpct,mu1,mu2, sig1,sig2))
diptestone = DIP_TEST(bimodalData)[[1]]
dip_pval = DIP_TEST(bimodalData)[[2]]
expmu2Vec = c(expmu2Vec,exp_mu2)
dipStat = c(dipStat,diptestone)
dipPval = c(dipPval, dip_pval)
testDone = c(testDone,"diptest")
}
}
table = data.frame(expmu2Vec,dipStat,testDone)
IndexPlot <- ggplot(table)+
geom_point(aes(expmu2Vec,dipStat,color=testDone))+
ylab("Index")+
xlab("Intensity of Bimodularity")+
scale_color_discrete(name="Test")
pval_table <- data.frame(expmu2Vec, dipPval, testDone)
Pval_Plot = ggplot(table)+
geom_point(aes(expmu2Vec,dipPval,color=testDone))+
ylab("P value")+
xlab("Intensity of Bimodularity")+
scale_color_discrete(name="Test")
pdf("/home/elijah/Documents/Clusterability/Results/Dip_Test_Analysis.pdf")
ExamplePlot
IndexPlot
Pval_Plot
dev.off()
ExamplePlot
IndexPlot
Pval_Plot
rm(list = ls())
gc()
options(warn=-1)
suppressPackageStartupMessages({
library(Seurat)
library(reticulate)
library(splatter)
library(SingleCellExperiment)
library(ggplot2)
library(dplyr)
library(clue)
library(pcaReduce)
library(parallelDist)
library(data.table)
library(multiview)
library(cowplot)
library(diptest)
library(pheatmap)
library(ggplotify)
library(tidyverse)
library(agricolae)
}
)
# source required functions
setwd("~/Documents/Clusterability/scripts/")
source("Helper_Functions.R")
source("~/Documents/scrna2019-master/algs/glmpca.R")
source("~/Documents/scrna2019-master/util/functions.R")
source("~/Documents/scrna2019-master/util/functions_genefilter.R")
source("Pipeline_Functions.R")
source("Clustering_Functions.R")
source("func.R")
source("Dip_Functions.R")
# source("RaceID2_StemID_class.R")
use_virtualenv("r-reticulate")
# get the counts data
counts <- fread("../Data/Citro_hash_noCycle_noMyeloid.txt") %>% column_to_rownames(var = "V1")
# run the pipeline
obj <- CreateModalityObject(counts)
# add the seurat slot
obj <- PreprocessObject(obj,  nFeatures = 500)
# add the scrna slot
obj <- PreprocessObject(obj, method = "Scrna", nFeatures = 500)
obj <- PreprocessObject(obj, method = "SCTransform", nFeatures = 500)
# Run consensus tests
obj <- .ConsensusTest(obj)
obj <- .ConsensusTest(obj, method = "Scrna")
obj <- .ConsensusTest(obj, method = "SCTransform")
seurat <- as.data.frame(unlist(obj@Tests$Seurat$Consensus))
colnames(seurat) <- c("Seurat.Dip.Pvalue")
sctransfrom <- as.data.frame(unlist(obj@Tests$SCTransform$Consensus))
colnames(sctransfrom) <- c("SCTransform.Dip")
scrna <- as.data.frame(unlist(obj@Tests$Scrna$Consensus))
colnames(scrna) <- c("Scrna.Dip.Pvalue")
res.table <- cbind(scrna, seurat, sctransfrom)
colnames(res.table) <- c("Seurat", "Scrna", "SCTransform")
res.table$Seurat[1] <- 0.98
obj.heatmap <- pheatmap::pheatmap(as.matrix(res.table), cluster_rows = F, cluster_cols = F, main = paste("Citro Consensus Heatmap"), display_numbers = T, number_color = "black")
heatmap.con <- ggplotify::as.ggplot(obj.heatmap)
# Run the modality tests
obj <- TestModality(obj)
obj <- TestModality(obj, type = "Scrna")
obj <-TestModality(obj, type = "SCTransform")
seurat <- as.data.frame(unlist(obj@Tests$Seurat$Dip))
colnames(seurat) <- c("Seurat.Dip.Pvalue")
sctransfrom <- as.data.frame(unlist(obj@Tests$SCTransform$Dip))
colnames(sctransfrom) <- c("SCTransform.Dip")
scrna <- as.data.frame(unlist(obj@Tests$Scrna$Dip))
colnames(scrna) <- c("Scrna.Dip.Pvalue")
res.table <- cbind(scrna, seurat, sctransfrom)
colnames(res.table) <- c("Seurat", "Scrna", "SCTransform")
# plot heat map
obj.heatmap <- pheatmap::pheatmap(as.matrix(res.table), cluster_rows = F, cluster_cols = F, main = paste("Citro Dip Heatmap"), display_numbers = T, number_color = "black")
heatmap.dip <- ggplotify::as.ggplot(obj.heatmap)
# generate Tsne and umap plots
umap.dat <- as.data.frame(obj@SCTransform$Umap.Data)
p.umap <-  ggplot(umap.dat) + geom_point(aes(V1, V2)) + labs(title = paste("Citro Umap"), x = "Umap_1", y = "Umap_2") + theme_gray() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90))
tsne.dat <- as.data.frame(obj@SCTransform$Tsne.Data)
p.tsne <-  ggplot(tsne.dat) + geom_point(aes(V1, V2)) + labs(title = paste("Citro Tsne"), x = "Tsne_1", y = "Tsne_2") + theme_gray() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90))
# generate the VAT plot
gradient.color <- list(low = "steelblue",  high = "white")
res <- factoextra::get_clust_tendency(obj@SCTransform$Umap.Data, n = 100, graph = T, gradient = gradient.color)
p <- ggplotify::as.ggplot(res$plot)
p <- p + labs(title = paste("Citro VAT Plot")) + theme_gray() + theme(plot.title = element_text(hjust = 0.5), axis.title.x = element_blank(), axis.title.y = element_blank())
# combine the plots
plots.citro <- plot_grid(p.umap,
heatmap.dip, heatmap.con, p, labels = c("A", "B", "C", "D"))
# # sc3 analysis
# sc3_sce <- SingleCellExperiment(
#     assays = list(counts = obj@Data$cleaned)
# )
# sc3_sce <- scater::normalize(sc3_sce)
#
# # estimate the number of clusters
# sc3_k <- sc3_estimate_k(sc3_sce)@metadata$sc3$k_estimation
#
# # Compute consensus matrix
# rowData(sc3_sce)$feature_symbol <- rownames(sc3_sce)
# sce <- sc3(sc3_sce, ks = 2:4, biology = F, n_cores = 6)
plots.citro
rm(list = ls())
gc()
options(warn=-1)
suppressPackageStartupMessages({
library(Seurat)
library(reticulate)
library(splatter)
library(SingleCellExperiment)
library(ggplot2)
library(dplyr)
library(clue)
library(pcaReduce)
library(parallelDist)
library(data.table)
library(multiview)
library(cowplot)
library(diptest)
library(pheatmap)
library(ggplotify)
library(tidyverse)
library(agricolae)
}
)
# source required functions
setwd("~/Documents/Clusterability/scripts/")
source("Helper_Functions.R")
source("~/Documents/scrna2019-master/algs/glmpca.R")
source("~/Documents/scrna2019-master/util/functions.R")
source("~/Documents/scrna2019-master/util/functions_genefilter.R")
source("Pipeline_Functions.R")
source("Clustering_Functions.R")
source("func.R")
source("Dip_Functions.R")
# source("RaceID2_StemID_class.R")
use_virtualenv("r-reticulate")
# get the counts data
counts <- fread("../Data/Salmonella_hash_noCycle_noMyeloid.txt") %>% column_to_rownames(var = "V1")
# run the pipeline
obj <- CreateModalityObject(counts)
# add the seurat slot
obj <- PreprocessObject(obj,  nFeatures = 500)
# add the scrna slot
obj <- PreprocessObject(obj, method = "Scrna", nFeatures = 500)
obj <- PreprocessObject(obj, method = "SCTransform", nFeatures = 500)
# Run consensus tests
obj <- .ConsensusTest(obj)
obj <- .ConsensusTest(obj, method = "Scrna")
obj <- .ConsensusTest(obj, method = "SCTransform")
seurat <- as.data.frame(unlist(obj@Tests$Seurat$Consensus))
colnames(seurat) <- c("Seurat.Dip.Pvalue")
sctransfrom <- as.data.frame(unlist(obj@Tests$SCTransform$Consensus))
colnames(sctransfrom) <- c("SCTransform.Dip")
scrna <- as.data.frame(unlist(obj@Tests$Scrna$Consensus))
colnames(scrna) <- c("Scrna.Dip.Pvalue")
res.table <- cbind(scrna, seurat, sctransfrom)
colnames(res.table) <- c("Seurat", "Scrna", "SCTransform")
obj.heatmap <- pheatmap::pheatmap(as.matrix(res.table), cluster_rows = F, cluster_cols = F, main = paste("Salmonella Consensus Heatmap"), display_numbers = T, number_color = "black")
heatmap.con <- ggplotify::as.ggplot(obj.heatmap)
# Run the modality tests
obj <- TestModality(obj)
obj <- TestModality(obj, type = "Scrna")
obj <-TestModality(obj, type = "SCTransform")
seurat <- as.data.frame(unlist(obj@Tests$Seurat$Dip))
colnames(seurat) <- c("Seurat.Dip.Pvalue")
sctransfrom <- as.data.frame(unlist(obj@Tests$SCTransform$Dip))
colnames(sctransfrom) <- c("SCTransform.Dip")
scrna <- as.data.frame(unlist(obj@Tests$Scrna$Dip))
colnames(scrna) <- c("Scrna.Dip.Pvalue")
res.table <- cbind(scrna, seurat, sctransfrom)
colnames(res.table) <- c("Seurat", "Scrna", "SCTransform")
# plot heat map
obj.heatmap <- pheatmap::pheatmap(as.matrix(res.table), cluster_rows = F, cluster_cols = F, main = paste("Salmonella Dip Heatmap"), display_numbers = T, number_color = "black")
heatmap.dip <- ggplotify::as.ggplot(obj.heatmap)
# generate Tsne and umap plots
umap.dat <- as.data.frame(obj@SCTransform$Umap.Data)
p.umap <-  ggplot(umap.dat) + geom_point(aes(V1, V2)) + labs(title = paste("Salmonella Umap"), x = "Umap_1", y = "Umap_2") + theme_gray() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90))
tsne.dat <- as.data.frame(obj@SCTransform$Tsne.Data)
p.tsne <-  ggplot(tsne.dat) + geom_point(aes(V1, V2)) + labs(title = paste("Salmonella Tsne"), x = "Tsne_1", y = "Tsne_2") + theme_gray() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90))
# generate the VAT plot
gradient.color <- list(low = "steelblue",  high = "white")
res <- factoextra::get_clust_tendency(obj@SCTransform$Umap.Data, n = 100, graph = T, gradient = gradient.color)
p <- ggplotify::as.ggplot(res$plot)
p <- p + labs(title = paste("Salmonella VAT Plot")) + theme_gray() + theme(plot.title = element_text(hjust = 0.5), axis.title.x = element_blank(), axis.title.y = element_blank())
# combine the plots
plots.salmonella <- plot_grid(p.umap,
heatmap.dip, heatmap.con, p, labels = c("A", "B", "C", "D"))# sc3 analysis
# sc3_sce <- SingleCellExperiment(
#     assays = list(counts = obj@Data$cleaned[rownames(obj@SCTransform$Scaled.Data), ])
# )
# sc3_sce <- scater::normalize(sc3_sce)
# # estimate the number of clusters
# sc3_k <- sc3_estimate_k(sc3_sce)@metadata$sc3$k_estimation
#
# # Compute consensus matrix
# rowData(sc3_sce)$feature_symbol <- rownames(sc3_sce)
# sce <- sc3(sc3_sce, ks = 2, biology = F, n_cores = 6)
plots.salmonella
rm(list = ls())
gc()
options(warn=-1)
suppressPackageStartupMessages({
library(Seurat)
library(reticulate)
library(splatter)
library(SingleCellExperiment)
library(ggplot2)
library(dplyr)
library(clue)
library(pcaReduce)
library(parallelDist)
library(data.table)
library(multiview)
library(cowplot)
library(diptest)
library(pheatmap)
library(ggplotify)
library(tidyverse)
library(agricolae)
}
)
# source required functions
setwd("~/Documents/Clusterability/scripts/")
source("Helper_Functions.R")
source("~/Documents/scrna2019-master/algs/glmpca.R")
source("~/Documents/scrna2019-master/util/functions.R")
source("~/Documents/scrna2019-master/util/functions_genefilter.R")
source("Pipeline_Functions.R")
source("Clustering_Functions.R")
source("func.R")
source("Dip_Functions.R")
# source("RaceID2_StemID_class.R")
use_virtualenv("r-reticulate")
# get the counts data
counts <- fread("../Data/SPF_allTcells.txt") %>% column_to_rownames(var = "V1")
# run the pipeline
obj <- CreateModalityObject(counts)
# add the seurat slot
obj <- PreprocessObject(obj,  nFeatures = 500)
# add the scrna slot
obj <- PreprocessObject(obj, method = "Scrna", nFeatures = 500)
obj <- PreprocessObject(obj, method = "SCTransform", nFeatures = 500)
# Run consensus tests
obj <- .ConsensusTest(obj)
obj <- .ConsensusTest(obj, method = "Scrna")
obj <- .ConsensusTest(obj, method = "SCTransform")
seurat <- as.data.frame(unlist(obj@Tests$Seurat$Consensus))
colnames(seurat) <- c("Seurat.Dip.Pvalue")
sctransfrom <- as.data.frame(unlist(obj@Tests$SCTransform$Consensus))
colnames(sctransfrom) <- c("SCTransform.Dip")
scrna <- as.data.frame(unlist(obj@Tests$Scrna$Consensus))
colnames(scrna) <- c("Scrna.Dip.Pvalue")
res.table <- cbind(scrna, seurat, sctransfrom)
colnames(res.table) <- c("Seurat", "Scrna", "SCTransform")
obj.heatmap <- pheatmap::pheatmap(as.matrix(res.table), cluster_rows = F, cluster_cols = F, main = paste("SPF Consensus Heatmap"), display_numbers = T, number_color = "black")
heatmap.con <- ggplotify::as.ggplot(obj.heatmap)
# Run the modality tests
obj <- TestModality(obj)
obj <- TestModality(obj, type = "Scrna")
obj <-TestModality(obj, type = "SCTransform")
seurat <- as.data.frame(unlist(obj@Tests$Seurat$Dip))
colnames(seurat) <- c("Seurat.Dip.Pvalue")
sctransfrom <- as.data.frame(unlist(obj@Tests$SCTransform$Dip))
colnames(sctransfrom) <- c("SCTransform.Dip")
scrna <- as.data.frame(unlist(obj@Tests$Scrna$Dip))
colnames(scrna) <- c("Scrna.Dip.Pvalue")
res.table <- cbind(scrna, seurat, sctransfrom)
colnames(res.table) <- c("Seurat", "Scrna", "SCTransform")
# plot heat map
obj.heatmap <- pheatmap::pheatmap(as.matrix(res.table), cluster_rows = F, cluster_cols = F, main = paste("SPF Dip Heatmap"), display_numbers = T, number_color = "black")
heatmap.dip <- ggplotify::as.ggplot(obj.heatmap)
# generate Tsne and umap plots
umap.dat <- as.data.frame(obj@SCTransform$Umap.Data)
p.umap <-  ggplot(umap.dat) + geom_point(aes(V1, V2)) + labs(title = paste("SPF Umap"), x = "Umap_1", y = "Umap_2") + theme_gray() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90))
tsne.dat <- as.data.frame(obj@SCTransform$Tsne.Data)
p.tsne <-  ggplot(tsne.dat) + geom_point(aes(V1, V2)) + labs(title = paste("SPF Tsne"), x = "Tsne_1", y = "Tsne_2") + theme_gray() + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 90))
# generate the VAT plot
gradient.color <- list(low = "steelblue",  high = "white")
res <- factoextra::get_clust_tendency(obj@SCTransform$Umap.Data, n = 100, graph = T, gradient = gradient.color)
p <- ggplotify::as.ggplot(res$plot)
p <- p + labs(title = paste("SPF VAT Plot")) + theme_gray() + theme(plot.title = element_text(hjust = 0.5), axis.title.x = element_blank(), axis.title.y = element_blank())
# combine the plots
plots.spf <- plot_grid(p.umap,
heatmap.dip, heatmap.con, p, labels = c("A", "B", "C", "D"))# sc3 analysis
# sc3_sce <- SingleCellExperiment(
#     assays = list(counts = obj@Data$cleaned[rownames(obj@SCTransform$Scaled.Data), ])
# )
# sc3_sce <- scater::normalize(sc3_sce)
# # estimate the number of clusters
# sc3_k <- sc3_estimate_k(sc3_sce)@metadata$sc3$k_estimation
#
# # Compute consensus matrix
# rowData(sc3_sce)$feature_symbol <- rownames(sc3_sce)
# sce <- sc3(sc3_sce, ks = 2, biology = F, n_cores = 6)
gc()
plots.spf
rm(list = ls())
gc()
options(warn=-1)
suppressPackageStartupMessages({
library(Seurat)
library(reticulate)
library(splatter)
library(SingleCellExperiment)
library(ggplot2)
library(dplyr)
library(clue)
library(pcaReduce)
library(parallelDist)
library(data.table)
library(multiview)
library(cowplot)
library(diptest)
library(pheatmap)
library(ggplotify)
library(tidyverse)
library(agricolae)
}
)
# source required functions
setwd("~/Documents/Clusterability/scripts/")
source("Helper_Functions.R")
source("~/Documents/scrna2019-master/algs/glmpca.R")
source("~/Documents/scrna2019-master/util/functions.R")
source("~/Documents/scrna2019-master/util/functions_genefilter.R")
source("Pipeline_Functions.R")
source("Clustering_Functions.R")
source("func.R")
source("Dip_Functions.R")
# source("RaceID2_StemID_class.R")
use_virtualenv("r-reticulate")
rm(list = ls())
gc()
options(warn=-1)
suppressPackageStartupMessages({
library(Seurat)
library(reticulate)
library(splatter)
library(SingleCellExperiment)
library(ggplot2)
library(dplyr)
library(clue)
library(pcaReduce)
library(parallelDist)
library(data.table)
library(multiview)
library(cowplot)
library(diptest)
library(pheatmap)
library(ggplotify)
library(tidyverse)
library(agricolae)
}
)
# source required functions
setwd("~/Documents/Clusterability/scripts/")
source("Helper_Functions.R")
source("~/Documents/scrna2019-master/algs/glmpca.R")
source("~/Documents/scrna2019-master/util/functions.R")
source("~/Documents/scrna2019-master/util/functions_genefilter.R")
source("Pipeline_Functions.R")
source("Clustering_Functions.R")
source("func.R")
source("Dip_Functions.R")
# source("RaceID2_StemID_class.R")
use_virtualenv("r-reticulate")
counts <- fread("../Data/RSEM.TPM.SM2.cortex1.txt") %>% column_to_rownames(var = "V1")
obj <- CreateModalityObject(counts)
# add the seurat slot
obj <- PreprocessObject(obj,  nFeatures = 300)
# add the scrna slot
obj <- PreprocessObject(obj, method = "Scrna", nFeatures = 300)
obj <- PreprocessObject(obj, method = "SCTransform", nFeatures = 300)
rm(list = ls())
gc()
options(warn=-1)
suppressPackageStartupMessages({
library(Seurat)
library(reticulate)
library(splatter)
library(SingleCellExperiment)
library(ggplot2)
library(dplyr)
library(clue)
library(pcaReduce)
library(parallelDist)
library(data.table)
library(multiview)
library(cowplot)
library(diptest)
library(pheatmap)
library(ggplotify)
library(tidyverse)
library(agricolae)
}
)
# source required functions
setwd("~/Documents/Clusterability/scripts/")
source("Helper_Functions.R")
source("~/Documents/scrna2019-master/algs/glmpca.R")
source("~/Documents/scrna2019-master/util/functions.R")
source("~/Documents/scrna2019-master/util/functions_genefilter.R")
source("Pipeline_Functions.R")
source("Clustering_Functions.R")
source("func.R")
source("Dip_Functions.R")
# source("RaceID2_StemID_class.R")
use_virtualenv("r-reticulate")
counts <- fread("../Data/HMSFsp_raw_data.txt") %>% column_to_rownames(var = "V1")
counts <- fread("../Data/HMSFsp_raw_data.txt") #%>% column_to_rownames(var = "V1")
rm(list = ls())
gc()
options(warn=-1)
suppressPackageStartupMessages({
library(Seurat)
library(reticulate)
library(splatter)
library(SingleCellExperiment)
library(ggplot2)
library(dplyr)
library(clue)
library(pcaReduce)
library(parallelDist)
library(data.table)
library(multiview)
library(cowplot)
library(diptest)
library(pheatmap)
library(ggplotify)
library(tidyverse)
library(agricolae)
}
)
# source required functions
setwd("~/Documents/Clusterability/scripts/")
source("Helper_Functions.R")
source("~/Documents/scrna2019-master/algs/glmpca.R")
source("~/Documents/scrna2019-master/util/functions.R")
source("~/Documents/scrna2019-master/util/functions_genefilter.R")
source("Pipeline_Functions.R")
source("Clustering_Functions.R")
source("func.R")
source("Dip_Functions.R")
# source("RaceID2_StemID_class.R")
use_virtualenv("r-reticulate")
counts <- fread("../Data/HMSFsp_raw_data.txt") %>% column_to_rownames(var = "GENE")
obj <- CreateModalityObject(counts)
# add the seurat slot
obj <- PreprocessObject(obj,  nFeatures = 500)
# add the scrna slot
obj <- PreprocessObject(obj, method = "Scrna", nFeatures = 500)
